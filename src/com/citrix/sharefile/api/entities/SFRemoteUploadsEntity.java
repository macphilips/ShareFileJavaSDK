// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2017 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------

package com.citrix.sharefile.api.entities;

import com.citrix.sharefile.api.SFApiQuery;
import com.citrix.sharefile.api.exceptions.InvalidOrMissingParameterException;
import com.citrix.sharefile.api.interfaces.ISFApiClient;
import com.citrix.sharefile.api.interfaces.ISFQuery;
import com.citrix.sharefile.api.models.*;

import java.net.URI;

public class SFRemoteUploadsEntity extends SFEntitiesBase {
    public SFRemoteUploadsEntity(ISFApiClient client) {
        super(client);
    }

    public ISFQuery<SFODataFeed<SFRemoteUpload>> get() {

        SFApiQuery<SFODataFeed<SFRemoteUpload>> sfApiQuery = new SFApiQuery<SFODataFeed<SFRemoteUpload>>(this.client);
        sfApiQuery.setFrom("RemoteUploads");
        sfApiQuery.setHttpMethod("GET");
        return sfApiQuery;
    }

    public ISFQuery<SFRemoteUpload> getPublic() {

        SFApiQuery<SFRemoteUpload> sfApiQuery = new SFApiQuery<SFRemoteUpload>(this.client);
        sfApiQuery.setFrom("RemoteUploads");
        sfApiQuery.setAction("Public");
        sfApiQuery.setHttpMethod("GET");
        return sfApiQuery;
    }

    public ISFQuery<SFRemoteUpload> get(URI url) throws InvalidOrMissingParameterException {
        if (url == null) {
            throw new InvalidOrMissingParameterException("url");
        }

        SFApiQuery<SFRemoteUpload> sfApiQuery = new SFApiQuery<SFRemoteUpload>(this.client);
        sfApiQuery.setFrom("RemoteUploads");
        sfApiQuery.addIds(url);
        sfApiQuery.setHttpMethod("GET");
        return sfApiQuery;
    }

    public ISFQuery<SFUploadSpecification> upload2(URI url, SFRemoteUploadRequestParams uploadParams, String userId, Integer expirationDays) throws InvalidOrMissingParameterException {
        if (url == null) {
            throw new InvalidOrMissingParameterException("url");
        }
        if (uploadParams == null) {
            throw new InvalidOrMissingParameterException("uploadParams");
        }
        if (userId == null) {
            throw new InvalidOrMissingParameterException("userId");
        }
        if (expirationDays == null) {
            throw new InvalidOrMissingParameterException("expirationDays");
        }

        SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
        sfApiQuery.setFrom("RemoteUploads");
        sfApiQuery.setAction("Upload2");
        sfApiQuery.addIds(url);
        sfApiQuery.addQueryString("userId", userId);
        sfApiQuery.addQueryString("expirationDays", expirationDays);
        sfApiQuery.setBody(uploadParams);
        sfApiQuery.setHttpMethod("POST");
        return sfApiQuery;
    }

    public ISFQuery<SFUploadSpecification> upload2(URI url, SFRemoteUploadRequestParams uploadParams, String userId) throws InvalidOrMissingParameterException {
        if (url == null) {
            throw new InvalidOrMissingParameterException("url");
        }
        if (uploadParams == null) {
            throw new InvalidOrMissingParameterException("uploadParams");
        }
        if (userId == null) {
            throw new InvalidOrMissingParameterException("userId");
        }

        SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
        sfApiQuery.setFrom("RemoteUploads");
        sfApiQuery.setAction("Upload2");
        sfApiQuery.addIds(url);
        sfApiQuery.addQueryString("userId", userId);
        sfApiQuery.setBody(uploadParams);
        sfApiQuery.setHttpMethod("POST");
        return sfApiQuery;
    }

    public ISFQuery<SFRemoteUpload> create(SFRemoteUpload remoteUpload) throws InvalidOrMissingParameterException {
        if (remoteUpload == null) {
            throw new InvalidOrMissingParameterException("remoteUpload");
        }

        SFApiQuery<SFRemoteUpload> sfApiQuery = new SFApiQuery<SFRemoteUpload>(this.client);
        sfApiQuery.setFrom("RemoteUploads");
        sfApiQuery.setBody(remoteUpload);
        sfApiQuery.setHttpMethod("POST");
        return sfApiQuery;
    }

    public ISFQuery<SFRemoteUpload> update(SFRemoteUpload remoteUpload) throws InvalidOrMissingParameterException {
        if (remoteUpload == null) {
            throw new InvalidOrMissingParameterException("remoteUpload");
        }

        SFApiQuery<SFRemoteUpload> sfApiQuery = new SFApiQuery<SFRemoteUpload>(this.client);
        sfApiQuery.setFrom("RemoteUploads");
        sfApiQuery.setBody(remoteUpload);
        sfApiQuery.setHttpMethod("PATCH");
        return sfApiQuery;
    }

    public ISFQuery delete(String id) throws InvalidOrMissingParameterException {
        if (id == null) {
            throw new InvalidOrMissingParameterException("id");
        }

        SFApiQuery sfApiQuery = new SFApiQuery(this.client);
        sfApiQuery.setFrom("RemoteUploads");
        sfApiQuery.addQueryString("id", id);
        sfApiQuery.setHttpMethod("DELETE");
        return sfApiQuery;
    }

    public ISFQuery<SFODataFeed<SFContact>> getUsers() {

        SFApiQuery<SFODataFeed<SFContact>> sfApiQuery = new SFApiQuery<SFODataFeed<SFContact>>(this.client);
        sfApiQuery.setFrom("RemoteUploads");
        sfApiQuery.setAction("Users");
        sfApiQuery.setHttpMethod("GET");
        return sfApiQuery;
    }

    public ISFQuery<SFUser> validateRemoteUploadUser(String id, String email) throws InvalidOrMissingParameterException {
        if (id == null) {
            throw new InvalidOrMissingParameterException("id");
        }
        if (email == null) {
            throw new InvalidOrMissingParameterException("email");
        }

        SFApiQuery<SFUser> sfApiQuery = new SFApiQuery<SFUser>(this.client);
        sfApiQuery.setFrom("RemoteUploads");
        sfApiQuery.setAction("ValidateRemoteUploadUser");
        sfApiQuery.addQueryString("id", id);
        sfApiQuery.addQueryString("email", email);
        sfApiQuery.setHttpMethod("POST");
        return sfApiQuery;
    }

}

